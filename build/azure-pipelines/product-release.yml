steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "12.x"

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
    inputs:
      versionSpec: "1.x"

  - task: AzureKeyVault@1
    displayName: "Azure Key Vault: Get Secrets"
    inputs:
      azureSubscription: "vscode-builds-subscription"
      KeyVaultName: vscode

  - script: |
      set -e
      (cd build ; yarn)
    displayName: Install dependencies

  - script: |
      set -e
      VERSION=`node -p "require(\"./package.json\").version"`
      AZURE_DOCUMENTDB_MASTERKEY="$(builds-docdb-key-readwrite)" \
        node build/azure-pipelines/common/createBuild.js $VERSION
    displayName: Create build

  - pwsh: Start-Sleep -Seconds 600
    displayName: Delay start

  - pwsh: |
      $set = [System.Collections.Generic.HashSet[string]]::new()

      # Determine which stages we need to watch
      $stages = @(
        if ('$(VSCODE_BUILD_STAGE_WINDOWS)' -eq 'True') { 'Windows' }
        if ('$(VSCODE_BUILD_STAGE_LINUX)' -eq 'True')   { 'Linux' }
        if ('$(VSCODE_BUILD_STAGE_MACOS)' -eq 'True')   { 'macOS' }
      )

      do {
        Start-Sleep -Seconds 10

        try {
          $res = Invoke-RestMethod "https://dev.azure.com/monacotools/Monaco/_apis/build/builds/$(Build.BuildId)/artifacts?api-version=6.0" -Headers @{
            Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
          } -MaximumRetryCount 5 -RetryIntervalSec 1
        } catch {
          Write-Warning $_
          $res = $null
        }

        if ($res) {
          $res.value | Where-Object name -Like 'vscode-*'
          "should see output here"
          $res.value | Where-Object { $_.name -Like 'vscode-*' } | ForEach-Object {
            if($set.Add($_.name)) {
              Write-Host "Processing artifact: '$($_.name). Downloading from: $($_.resource.downloadUrl)"
              Invoke-RestMethod $_.resource.downloadUrl -OutFile "$(Agent.TempDirectory)/$($_.name).zip"
              Expand-Archive -Path "$(Agent.TempDirectory)/$($_.name).zip" -DestinationPath "$(Agent.TempDirectory)/$($_.name)"
              gci -rec "$(Agent.TempDirectory)/$($_.name)"
            }
          }
        }

        # Get the timeline and see if it says the other stage completed
        try {
          $timeline = Invoke-RestMethod "$(BUILDS_API_URL)timeline?api-version=6.0" -Headers @{
            Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
          }  -MaximumRetryCount 5 -RetryIntervalSec 1
        } catch {
          Write-Warning $_
          continue
        }

        foreach ($stage in $stages) {
          $otherStageFinished = $timeline.records | Where-Object { $_.name -eq $stage -and $_.type -eq 'stage' -and $_.state -eq 'completed' }
          if (!$otherStageFinished) {
            break
          }
        }
      } while (!$otherStageFinished)

      Write-Host "DONE WITH NUMBER OF ARTIFACTS: $($set.Count)"
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    displayName: Process artifacts

  - script: |
      set -e

      # AZURE_DOCUMENTDB_MASTERKEY="$(builds-docdb-key-readwrite)" \
      # AZURE_STORAGE_ACCESS_KEY_2="$(vscode-storage-key)" \
      # MOONCAKE_STORAGE_ACCESS_KEY="$(vscode-mooncake-storage-key)" \
      # node build/azure-pipelines/common/sync-mooncake.js "$VSCODE_QUALITY"

      echo "we would sync mooncake $VSCODE_QUALITY"

  - script: |
      set -e

      # AZURE_DOCUMENTDB_MASTERKEY="$(builds-docdb-key-readwrite)" \
      # node build/azure-pipelines/common/releaseBuild.js

      echo 'we would release the build here...'
    condition: and(succeeded(), or(eq(variables['VSCODE_RELEASE'], true), and(in(variables['VSCODE_QUALITY'], 'insider', 'exploration'), eq(variables['VSCODE_SCHEDULEDBUILD'], true))))
